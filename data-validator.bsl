

&НаСервере
Функция ПроверитьСтроку(Строка, Фасет)
	Чтение = Новый ЧтениеXML;
	Чтение.УстановитьСтроку(
				"<Model xmlns=""http://v8.1c.ru/8.1/xdto"" xmlns:xs=""http://www.w3.org/2001/XMLSchema"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xsi:type=""Model"">
				|<package targetNamespace=""sample-my-package"">
				|<valueType name=""testtypes"" base=""xs:string"">
				|<pattern>" + Фасет + "</pattern>
				|</valueType>
				|<objectType name=""TestObj"">
				|<property xmlns:d4p1=""sample-my-package"" name=""TestItem"" type=""d4p1:testtypes""/>
				|</objectType>
				|</package>
				|</Model>");

	Модель = ФабрикаXDTO.ПрочитатьXML(Чтение);
	МояФабрикаXDTO = Новый ФабрикаXDTO(Модель);
	Пакет = МояФабрикаXDTO.Пакеты.Получить("sample-my-package");
	Тест = МояФабрикаXDTO.Создать(Пакет.Получить("TestObj"));

	Попытка
		Тест.TestItem = Строка;
		Возврат Истина
	Исключение
		Возврат Ложь
	КонецПопытки;
	
КонецФункции

//. - любой символ

//+ - один или более раз, пример ".+" - один или более любой символ.

//* - ноль или более раз, пример ".*" - любое количество любых символов (даже ни одного).

//[n-m] - символ от m до n, пример: "[0-9]+" - одна или более цифр(а).

//\d - цифра, пример \d+ - одна или более цифр(а).

//\D - не цифра.

//\s - пробельный символ - ТАБ, пробел, перенос строки, возврат каретки и т.п.

//\S - непробельный символ.

//\w - буква, цифра, подчеркивание.

//\W - не буква, не цифра и не подчеркивание соответственно.

//^ - начало текста, например "^\d+" - строка начинается с цифры.

//$ - конец текста, например "\D+$" - строка заканчивается НЕ цифрой.

//{m,n} - шаблон для от m до n символов, например "\d{2,4}" - от двух до четырех цифр. Можно указать одну и всего цифру для строгого соответвия.

//\ - экранирует спецсимволы. Например, "\." - символ точки.

 // \r Перевод строки, 
 // \t табуляция 
 
 //в паттерне проверяется шаблон, поэтому нужды в описателях начала и конца строки нет никаких,
 //более того - 1С на них ругается. Поэтому можно смело грохать ^ и $, ибо ^\d+$ в случае XDTO-паттерна будет равнозначна просто \d+. 
 	
&НаСервере
//Проверка корректности ФИО клиента
Функция ValidateFullName()
	
	  ТипПроверкиКирилица = "[А-ЯЁ][а-яё]+";
	  ТипПроверкиЛатинца = "[A-Z][a-z]+";
	  //Об = РеквизитФормыВЗначение("Объект"); 
	  
	  Если СтрДлина(Объект.Имя)=0 или  СтрДлина(Объект.Фамилия)=0  Тогда
		  
		  Возврат Ложь;
	  КонецЕсли;
		  
		  
	  
        //ФИО должно быть полностью на кириллице. Первый символ с большой буквы
		Если
			
			  ПроверитьСтроку(Объект.Имя,ТипПроверкиКирилица) 		и 
			  ПроверитьСтроку(Объект.Фамилия,ТипПроверкиКирилица)   и
			  
          	  //отчество может отсутствовать, проверяем отдельно
			  (СтрДлина(Объект.Отчество)=0 или ПроверитьСтроку(Объект.Отчество,ТипПроверкиКирилица)) 
		  
	  	Тогда
	  
		  Возврат Истина;
		  
	  	КонецЕсли;
	  
	  
	  Возврат Ложь;
   	  
	  
	  
	
КонецФункции

&НаКлиенте
Процедура Модель(Команда)
	
	//Сообщить(ПроверитьСтроку("01.01.2012","\d{2}\.\d{2}\.\d{4}"));
	//Сообщить(ПроверитьСтроку("01.01.20121","\d{2}\.\d{2}\.\d{4}"));
	Сообщить(ПроверитьСтроку("ворлдскилс","[а-я]+"));
	Сообщить(ПроверитьСтроку("Ворлдскилс","[А-ЯЁ][а-яё]+"));
	
КонецПроцедуры

&НаСервере
Функция ОбязательныеРеквизитыЗаполнены()
	
	 Об = РеквизитФормыВЗначение("Объект");
	 
	 МетаданныеОбработки = Об.Метаданные();
	 
	Для каждого Рекв из МетаданныеОбработки.Реквизиты Цикл

		Если Рекв.ПроверкаЗаполнения = ПроверкаЗаполнения.ВыдаватьОшибку Тогда
			  Если не ЗначениеЗаполнено(Об[Рекв.Имя]) Тогда
				  Возврат Ложь;
			  КонецЕсли;
		КонецЕсли;
		  	  
	КонецЦикла;
	
	Возврат Истина;
КонецФункции

&НаКлиенте
Процедура ПроверитьКлиента(Команда)
	
	РезультатПроверки = ОбязательныеРеквизитыЗаполнены() и ValidateFullName();
	
КонецПроцедуры

&НаКлиенте
Процедура ValidateFIO(Команда)
	
	РезультатПроверки = ValidateFullName();
	
КонецПроцедуры

&НаСервере
Функция ValidateBirthDateНаСервере()
	
	// Дата рождения должна быть меньше текущей даты.
	
	Если Объект.ДатаРождения > ТекущаяДата() Тогда
		
		Возврат Ложь;
		
	Иначе	
		
		Возврат Истина;
		
	КонецЕсли;	
		
КонецФункции

&НаКлиенте
Процедура ПроверитьДатуРождения(Команда)
	
	РезультатПроверки = ValidateBirthDateНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура Reset(Команда)
	
	РезультатПроверки = "";
	
КонецПроцедуры


&НаСервере
Функция ValidateDocНаСервере()
	
	//серия вводится 2 цифры пробел 2 цифры
		ТипПроверкиСерия = "[0-9]{2} [0-9]{2}";

	//номер состоит и цифр. Ну может забыл разработчик о возможности накладывать маски на поле ввода 
		ТипПроверкиНомер = "[0-9]+";
	  
		Если
			
			  ПроверитьСтроку(Объект.СерияДокумента,ТипПроверкиСерия)
			  и 
			  ПроверитьСтроку(Объект.НомерДокумента,ТипПроверкиНомер) 
			  
		Тогда
	  
		  Возврат Истина;
		  
	  	КонецЕсли;
	  
	  
	  Возврат Ложь;
   	  
КонецФункции


&НаКлиенте
Процедура ValidateDoc(Команда)
	
	РезультатПроверки = ValidateDocНаСервере();
	
КонецПроцедуры

